name: Deploy Lambda com SAM

on:
  push:
    branches:
      - main

jobs:
  create_layer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils

      - name: Preparar o Lambda Layer (ffmpeg)
        working-directory: layer-ffmpeg
        run: |
          mkdir -p build/layer/bin
          tar -xJf ffmpeg-release-amd64-static.tar.xz -C build/
          mv build/ffmpeg*/ffmpeg build/ffmpeg*/ffprobe build/layer/bin/

      - name: Criar bucket S3 se não existir
        run: |
          BUCKET_NAME="fiap-hackaton-2025-ffmpeg-bucket-release"
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Criando bucket $BUCKET_NAME"
            aws s3api create-bucket --bucket "$BUCKET_NAME"
          else
            echo "Bucket $BUCKET_NAME já existe"
          fi

      - name: Empacotar o CloudFormation com a AWS CLI
        working-directory: layer-ffmpeg
        run: |
          aws cloudformation package \
            --template-file template.yaml \
            --s3-bucket fiap-hackaton-2025-ffmpeg-bucket-release \
            --output-template-file build/output.yaml

      - name: Deploy com AWS CloudFormation
        working-directory: layer-ffmpeg
        run: |
          STACK_NAME=fiap-hackaton-2025-ffmpeg-layer-2025layer
          aws cloudformation deploy \
            --template-file build/output.yaml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM
          aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query Stacks[].Outputs \
            --output table

  deploy:
    runs-on: ubuntu-latest
    needs: create_layer

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Instalar dependências
        run: |
          pip install -r requirements.txt

      - name: Empacotar código Lambda
        run: |
          # Criar o arquivo .zip com o código Python da função Lambda
          zip -r lambda.zip src/lambda_function.py

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Obter ARN da última versão da Lambda Layer
        id: get-layer-arn
        run: |
          LAYER_NAME="fiap-hackaton-2025-ffmpeg-layer-2025layer"
          LAYER_ARN=$(aws lambda list-layer-versions \
            --layer-name $LAYER_NAME \
            --query 'LayerVersions[0].LayerVersionArn' \
            --output text)
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_OUTPUT

      - name: Criar bucket bucket-video-hackaton-release se não existir e configurar como público
        run: |
          BUCKET_NAME="bucket-video-hackaton-release"
          
          # Criar bucket se não existir
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Criando bucket $BUCKET_NAME"
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME"
          else
            echo "Bucket $BUCKET_NAME já existe"
          fi
          
          # Desbloquear o acesso público no nível do bucket
          echo "Desbloqueando acesso público no bucket $BUCKET_NAME"
          aws s3api put-public-access-block \
            --bucket "$BUCKET_NAME" \
            --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
          
          # Adicionar policy de bucket para permitir acesso público aos objetos
          echo "Aplicando bucket policy para permitir acesso público a objetos"
          aws s3api put-bucket-policy --bucket "$BUCKET_NAME" --policy "{
            \"Version\": \"2012-10-17\",
            \"Statement\": [
              {
                \"Sid\": \"PublicReadGetObject\",
                \"Effect\": \"Allow\",
                \"Principal\": \"*\",
                \"Action\": \"s3:GetObject\",
                \"Resource\": \"arn:aws:s3:::$BUCKET_NAME/*\"
              }
            ]
          }"

      - name: Verificar se a função Lambda existe
        id: check-function-exists
        run: |
          FUNCTION_NAME="lambda_function"
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $FUNCTION_NAME --region ${{ secrets.AWS_REGION }} --output text || echo "not_found")
          echo "FunctionExists=$FUNCTION_EXISTS" >> $GITHUB_OUTPUT

      - name: Criar função Lambda (se não existir)
        if: steps.check-function-exists.outputs.FunctionExists == 'not_found'
        run: |
          echo "Criando função Lambda: lambda_function"
          aws lambda create-function \
            --function-name lambda_function \
            --runtime python3.9 \
            --handler src/lambda_function.lambda_handler \
            --zip-file fileb://lambda.zip

      - name: Fazer deploy diretamente para o Lambda
        if: steps.check-function-exists.outputs.FunctionExists != 'not_found'
        run: |
          aws lambda update-function-code \
            --function-name lambda_function \
            --zip-file fileb://lambda.zip \
            --region ${{ secrets.AWS_REGION }} \
            --publish
